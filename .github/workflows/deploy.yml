name: Deploy to Vercel

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ secrets.TURBO_TEAM }}

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      hub: ${{ steps.changes.outputs.hub }}
      editorial: ${{ steps.changes.outputs.editorial }}
      academy: ${{ steps.changes.outputs.academy }}
      agency: ${{ steps.changes.outputs.agency }}
      packages: ${{ steps.changes.outputs.packages }}
      services: ${{ steps.changes.outputs.services }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            hub:
              - 'apps/hub/**'
            editorial:
              - 'apps/editorial/**'
            academy:
              - 'apps/academy/**'
            agency:
              - 'apps/agency/**'
            packages:
              - 'packages/**'
            services:
              - 'services/**'

  lint-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint
        run: pnpm lint

      - name: Type check
        run: pnpm type-check

      - name: Run tests
        run: pnpm test

  deploy-hub:
    needs: [changes, lint-and-test]
    if: needs.changes.outputs.hub == 'true' || needs.changes.outputs.packages == 'true' || needs.changes.outputs.services == 'true'
    runs-on: ubuntu-latest
    environment: 
      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'preview' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=${{ github.ref == 'refs/heads/main' && 'production' || 'preview' }} --token=${{ secrets.VERCEL_TOKEN }}
        working-directory: apps/hub

      - name: Build Project Artifacts
        run: vercel build ${{ github.ref == 'refs/heads/main' && '--prod' || '' }} --token=${{ secrets.VERCEL_TOKEN }}
        working-directory: apps/hub
        env:
          NEXT_PUBLIC_APP_NAME: hub
          NEXT_PUBLIC_APP_URL: ${{ github.ref == 'refs/heads/main' && 'https://cenie.org' || 'https://hub-preview.cenie.org' }}

      - name: Deploy to Vercel
        run: vercel deploy ${{ github.ref == 'refs/heads/main' && '--prod' || '' }} --prebuilt --token=${{ secrets.VERCEL_TOKEN }}
        working-directory: apps/hub

  deploy-editorial:
    needs: [changes, lint-and-test]
    if: needs.changes.outputs.editorial == 'true' || needs.changes.outputs.packages == 'true' || needs.changes.outputs.services == 'true'
    runs-on: ubuntu-latest
    environment: 
      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'preview' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=${{ github.ref == 'refs/heads/main' && 'production' || 'preview' }} --token=${{ secrets.VERCEL_TOKEN }}
        working-directory: apps/editorial

      - name: Build Project Artifacts
        run: vercel build ${{ github.ref == 'refs/heads/main' && '--prod' || '' }} --token=${{ secrets.VERCEL_TOKEN }}
        working-directory: apps/editorial
        env:
          NEXT_PUBLIC_APP_NAME: editorial
          NEXT_PUBLIC_APP_URL: ${{ github.ref == 'refs/heads/main' && 'https://editorial.cenie.org' || 'https://editorial-preview.cenie.org' }}

      - name: Deploy to Vercel
        run: vercel deploy ${{ github.ref == 'refs/heads/main' && '--prod' || '' }} --prebuilt --token=${{ secrets.VERCEL_TOKEN }}
        working-directory: apps/editorial

  deploy-academy:
    needs: [changes, lint-and-test]
    if: needs.changes.outputs.academy == 'true' || needs.changes.outputs.packages == 'true' || needs.changes.outputs.services == 'true'
    runs-on: ubuntu-latest
    environment: 
      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'preview' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=${{ github.ref == 'refs/heads/main' && 'production' || 'preview' }} --token=${{ secrets.VERCEL_TOKEN }}
        working-directory: apps/academy

      - name: Build Project Artifacts
        run: vercel build ${{ github.ref == 'refs/heads/main' && '--prod' || '' }} --token=${{ secrets.VERCEL_TOKEN }}
        working-directory: apps/academy
        env:
          NEXT_PUBLIC_APP_NAME: academy
          NEXT_PUBLIC_APP_URL: ${{ github.ref == 'refs/heads/main' && 'https://academy.cenie.org' || 'https://academy-preview.cenie.org' }}

      - name: Deploy to Vercel
        run: vercel deploy ${{ github.ref == 'refs/heads/main' && '--prod' || '' }} --prebuilt --token=${{ secrets.VERCEL_TOKEN }}
        working-directory: apps/academy

  deploy-agency:
    needs: [changes, lint-and-test]
    if: needs.changes.outputs.agency == 'true' || needs.changes.outputs.packages == 'true' || needs.changes.outputs.services == 'true'
    runs-on: ubuntu-latest
    environment: 
      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'preview' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=${{ github.ref == 'refs/heads/main' && 'production' || 'preview' }} --token=${{ secrets.VERCEL_TOKEN }}
        working-directory: apps/agency

      - name: Build Project Artifacts
        run: vercel build ${{ github.ref == 'refs/heads/main' && '--prod' || '' }} --token=${{ secrets.VERCEL_TOKEN }}
        working-directory: apps/agency
        env:
          NEXT_PUBLIC_APP_NAME: agency
          NEXT_PUBLIC_APP_URL: ${{ github.ref == 'refs/heads/main' && 'https://agency.cenie.org' || 'https://agency-preview.cenie.org' }}

      - name: Deploy to Vercel
        run: vercel deploy ${{ github.ref == 'refs/heads/main' && '--prod' || '' }} --prebuilt --token=${{ secrets.VERCEL_TOKEN }}
        working-directory: apps/agency

  notify:
    needs: [deploy-hub, deploy-editorial, deploy-academy, deploy-agency]
    if: always() && (needs.deploy-hub.result != 'skipped' || needs.deploy-editorial.result != 'skipped' || needs.deploy-academy.result != 'skipped' || needs.deploy-agency.result != 'skipped')
    runs-on: ubuntu-latest
    steps:
      - name: Deployment Status
        run: |
          echo "Deployment Summary:"
          echo "Hub: ${{ needs.deploy-hub.result }}"
          echo "Editorial: ${{ needs.deploy-editorial.result }}"
          echo "Academy: ${{ needs.deploy-academy.result }}"
          echo "Agency: ${{ needs.deploy-agency.result }}"